(define id      lambda x. x)
(define apply   lambda f x. f x)
(define const   lambda x y. x)
(define flip    lambda f a b. f b a)
(define compose lambda f g x. f (g x))

(define S lambda x y z. x z (y z))
(define K lambda x y. x)
(define I lambda x. x)
(define Y
  (lambda f x. f (x x))
  (lambda f x. f (x x)))
(define Z
  (lambda f x. f (lambda y. (x x) y))
  (lambda f x. f (lambda y. (x x) y)))

(define true     lambda t f. t)
(define false    lambda t f. f)
(define if       lambda p t f. p t f)
(define not      lambda p t f. p f t)
(define or       lambda p q. p p q)
(define and      lambda p q. p q p)
(define xor      lambda p q. p not id q)
(define nor      lambda p q. not (or p q))
(define nand     lambda p q. not (and p q))
(define implies  lambda p q. or (not p) q)

(define succ   lambda n f x. f (n f x))
(define 0      lambda f x. x)
(define 1      succ 0)
(define 2      succ 1)
(define 3      succ 2)
(define 4      succ 3)
(define 5      succ 4)
(define 6      succ 5)
(define 7      succ 6)
(define 8      succ 7)
(define 9      succ 8)
(define +      lambda m n f x. m f (n f x))
(define *      lambda m n f x. m (n f) x)
(define ^      lambda m n. n m)
(define zero?  lambda n. n (const false) true)
(define succ?  lambda n. n (const true) false)
(define pred   lambda n f x. n (lambda g h. h (g f)) (const x) id)
(define -      lambda m n. n pred m)

(define pair   lambda a b f. f a b)
(define fst    lambda p. p (lambda a b. a))
(define snd    lambda p. p (lambda a b. b))
(define swap   lambda p. p (flip pair))

(define some   lambda a b f. f a)
(define none   lambda   b f. b)
(define maybe  lambda b f m. m b f)

(define null                  lambda f z. z)
(define cons     lambda x xs. lambda f z. f x (xs f z))
(define null?    lambda xs. xs (lambda _ _. false) true)
(define cons?    lambda xs. xs (lambda _ _. true) false)
(define single   flip cons null)
(define foldr    lambda f z xs. xs f z)
(define foldl    lambda f z xs.
                   foldr (compose (flip compose) (flip f)) id xs z)
(define snoc     compose (flip append) single)
(define append   flip (foldr cons))
(define flatten  foldr append null)
(define reverse  foldl (flip cons) null)
(define any?     foldr or false)
(define all?     foldr and true)
(define none?    compose not any?)
(define map      lambda f. foldr (compose cons f) null)
(define filter   lambda f. foldr (lambda x. f x (cons x) id) null)

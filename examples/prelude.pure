(declare id      lambda x. x)
(declare apply   lambda f x. f x)
(declare const   lambda x y. x)
(declare flip    lambda f a b. f b a)
(declare compose lambda f g x. f (g x))

(declare S lambda x y z. x z (y z))
(declare K lambda x y. x)
(declare I lambda x. x)
(declare Y
  (lambda f x. f (x x))
  (lambda f x. f (x x)))
(declare Z
  (lambda f x. f (lambda y. (x x) y))
  (lambda f x. f (lambda y. (x x) y)))

(declare true     lambda t t. t)
(declare false    lambda f f. f)
(declare if       lambda p t f. p t f)
(declare not      lambda p t f. p f t)
(declare or       lambda p q. p p q)
(declare and      lambda p q. p q p)
(declare xor      lambda p q. p not id q)
(declare nor      lambda p q. not (or p q))
(declare nand     lambda p q. not (and p q))
(declare implies  lambda p q. or (not p) q)

(declare succ   lambda n f x. f (n f x))
(declare 0      lambda f x. x)
(declare 1      succ 0)
(declare 2      succ 1)
(declare 3      succ 2)
(declare 4      succ 3)
(declare 5      succ 4)
(declare 6      succ 5)
(declare 7      succ 6)
(declare 8      succ 7)
(declare 9      succ 8)
(declare +      lambda m n f x. m f (n f x))
(declare *      lambda m n f x. m (n f) x)
(declare ^      lambda m n. n m)
(declare zero?  lambda n. n (const false) true)
(declare succ?  lambda n. n (const true) false)
(declare pred   lambda n f x. n (lambda g h. h (g f)) (const x) id)
(declare -      lambda m n. n pred m)

(declare pair   lambda a b f. f a b)
(declare fst    lambda p. p (lambda a b. a))
(declare snd    lambda p. p (lambda a b. b))
(declare swap   lambda p. p (flip pair))

(declare some   lambda a b f. f a)
(declare none   lambda   b f. b)
(declare maybe  lambda b f m. m b f)

(declare null                  lambda f z. z)
(declare cons     lambda x xs. lambda f z. f x (xs f z))
(declare null?    lambda xs. xs (lambda _ _. false) true)
(declare cons?    lambda xs. xs (lambda _ _. true) false)
(declare single   flip cons null)
(declare foldr    lambda f z xs. xs f z)
(declare foldl    lambda f z xs. xs (compose (flip compose) (flip f)) id z)
(declare snoc     compose (flip append) single)
(declare append   flip (foldr cons))
(declare reverse  foldl (flip cons) null)
(declare any?     foldr or false)
(declare all?     foldr and true)
(declare none?    compose not any?)
(declare map      lambda f. foldr (compose cons f) null)
(declare filter   lambda f. foldr (lambda x. f x (cons x) id) null)

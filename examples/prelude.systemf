(define id      Λα. λx:α. x)
(define apply   Λα β. λf:(α → β) x:α. f x)
(define const   Λα β. λx:α y:β. x)
(define flip    Λα β. λf:(α → β) a:α b:β. f b a)
(define compose Λα β γ. λf:(β → γ) g:(α → β) x:α. f (g x))

(define S       Λα β γ. λx:(α → β → γ) y:(α → β) z:α. x z (y z))
(define K       Λα β. λx:α y:β. x)
(define I       Λα. λx:α. x)

(define true     Λα. λt:α f:α. t)
(define false    Λα. λt:α f:α. f)
(define if       Λα. λp:(α → α → α) t:α f:α. p t f)
(define not      Λα. λp:(α → α → α) t:α f:α. p f t)
(define or       Λα. λp:(α → α → α) q:(α → α → α). p p q)
(define and      Λα. λp:(α → α → α) q:(α → α → α). p q p)
(define xor      Λα. λp:(α → α → α) q:(α → α → α). p not id q)
(define nor      Λα. λp:(α → α → α) q:(α → α → α). not (or p q))
(define nand     Λα. λp:(α → α → α) q:(α → α → α). not (and p q))
(define implies  Λα. λp:(α → α → α) q:(α → α → α). or (not p) q)

(define succ   Λα. λn:((α → α) → α → α) f:(α → α) x:α. f (n f x))
(define 0      Λα. λf:(α → α) x:α. x)
(define 1      succ 0)
(define 2      succ 1)
(define 3      succ 2)
(define 4      succ 3)
(define 5      succ 4)
(define 6      succ 5)
(define 7      succ 6)
(define 8      succ 7)
(define 9      succ 8)
(define +      Λα. λm:((α → α) → α → α) n:((α → α) → α → α) f:(α → α) x:α. m f (n f x))
(define *      Λα. λm:((α → α) → α → α) n:((α → α) → α → α) f:(α → α) x:α. m (n f) x)
(define ^      Λα. λm:((α → α) → α → α) n:((α → α) → α → α). n m)
(define zero?  Λα. λn:((α → α) → α → α). n (const false) true)
(define succ?  Λα. λn:((α → α) → α → α). n (const true) false)
(define pred   Λα. λn:((α → α) → α → α) f:(α → α) x:α. n (λg h. h (g f)) (const x) id)
(define -      Λα. λm:((α → α) → α → α) n:((α → α) → α → α). n pred m)

(define pair   Λα β. λa:α b:β p:(α → β). p a b)
(define fst    Λα β. λp:(α → β). p (λa:α b:β. a))
(define snd    Λα β. λp:(α → β). p (λa:α b:β. b))
(define swap   Λα β. λp:(α → β). p (flip pair))

(define some   Λα. λa:α b:α f:(α → α). f a)
(define none   Λα. λ    b:α f:(α → α). b)
(define maybe  Λα. λb:α f:(α → α) m. m b f)

(define null            λf z. z)
(define cons     λx xs. λf z. f x (xs f z))
(define null?    λxs. xs (λ_ _. false) true)
(define cons?    λxs. xs (λ_ _. true) false)
(define single   flip cons null)
(define foldr    λf z xs. xs f z)
(define foldl    λf z xs.
                   foldr (compose (flip compose) (flip f)) id xs z)
(define snoc     compose (flip append) single)
(define append   flip (foldr cons))
(define flatten  foldr append null)
(define reverse  foldl (flip cons) null)
(define any?     foldr or false)
(define all?     foldr and true)
(define none?    compose not any?)
(define map      λf. foldr (compose cons f) null)
(define filter   λf. foldr (λx. f x (cons x) id) null)
